import { Injectable } from '@nestjs/common';
import * as net from 'net';
enum CONTROL_CODE {
  READ = 0x03,
  WRITE = 0x06,
}
enum CMD {
  READ_TEMP,
  SET_TEMP,
  OPEN,
  CLOSE,
  READ_ADDR
}
type Device = {
  ip: string;
  name: string,
  addr: number;
  socket?: net.Socket;
  isActive: boolean;
  cmd?: CMD;
}
@Injectable()
export class AcService {
  private server: net.Server;
  private devices: Device[];
  // private readonly CLOSE = [0x01, 0x06, 0x00, 0x25, 0x00, 0x00, 0x98, 0x01];
  // private readonly OPEN = [0x01, 0x06, 0x00, 0x25, 0x00, 0x01, 0x59, 0xc1];
  constructor() {
    this.register();
    this.tcpServer();
    // let status = 0;
    // setInterval(() => {
    //   if (status) {
    //     console.log('close');
    //     this.close(1);
    //   } else {
    //     console.log('open');
    //     this.open(0x01);
    //     status = 1;
    //   }
    // }, 5000)
  }
  // 后续可以变成远程设置
  register() {
    this.devices = [{ ip: '192.168.40.186', addr: 0x01, name: '三楼', isActive: false }];
  }
  getDevices() {
    return this.devices;
  }
  findDeviceIdxByProprty = (value: string, proprty: string = 'ip') => this.devices.findIndex((device) => device[proprty] === value)
  findDevice(value: any, propry: string = 'ip') {
    const idx = this.findDeviceIdxByProprty(value, propry);
    return this.devices[idx];
  }
  updateDevice(ip: string, update: any) {
    const idx = this.findDeviceIdxByProprty(ip);
    this.devices[idx] = { ...this.devices[idx], ...update }
  }
  tcpServer() {
    this.server = net.createServer((socket) => {
      socket.on('connect', (data) => {
        console.log('connect', new Date(), data);
      })
      socket.on('data', (data) => {
        const ip = this.matchAddr(socket.remoteAddress);
        const device = this.findDevice(ip);
        if (ip && !device.socket) {
          console.log('首次连接', new Date(), ip, this.devices[ip]);
          this.updateDevice(ip, { socket, isActive: true, ip })
        }

        console.log('收到数据:', new Date(), data, data.toString(), 'from', ip);
        // // 读地址
        // console.log('add', this.getAddr());


      });

      socket.on('end', () => {
        console.log('Client disconnected');
      });
      socket.on('error', (err) => {
        console.log('error', new Date(), err)
      })

    });

    this.server.listen(8502, () => {
      console.log('Server is listening on port 8502');

    });
  }
  matchAddr(ip?: string) {
    const result = ip?.match(/([\d]+.){3}[\d]+/);
    if (result.length) {
      return result[0]
    }
    return '0'
  }
  close(addr: number) {
    this.send(addr, this.basicCmd(1, CONTROL_CODE.WRITE, Buffer.from([0x00, 0x25]), Buffer.from([0x00, 0x00])), CMD.CLOSE);

  }
  open(addr: number) {
    return this.send(addr, this.basicCmd(1, CONTROL_CODE.WRITE, Buffer.from([0x00, 0x25]), Buffer.from([0x00, 0x01])), CMD.OPEN);

  }
  /**
   * 调高温度
   * @param addr 设备地址
   * @param temp 增加的温度
   */
  high(addr: number, temp: number) {
    // 读取温度
    // 设置温度
  }
  /**
   * 降低温度
   * @param addr 设备地址
   * @param temp 降低的温度
   */
  down(addr: number, temp: number) {

  }
  getTemp(addr: number) {
    return this.send(addr, this.basicCmd(addr, CONTROL_CODE.READ, Buffer.from([0, 0x26]), Buffer.from([0, 1])), CMD.READ_TEMP);
  }
  /**
  * 降低温度
  * @param addr 设备地址
  * @param temp 降低的温度
  */
  set(addr: number, temp: number) {
    const value = temp - 16;
    console.log(value.toString(16));
    this.send(addr, this.basicCmd(addr, CONTROL_CODE.WRITE, Buffer.from([0, 0x26]), Buffer.from([0, value])), CMD.SET_TEMP);
  }
  getAddr(addr: number) {
    this.send(addr, this.basicCmd(addr, CONTROL_CODE.READ, Buffer.from([0, 0x02]), Buffer.from([0, 1])), CMD.READ_ADDR);
  }
  send(addr: number, code: Buffer, cmd: CMD) {
    const device = this.findDevice(addr, 'addr');
    this.updateDevice(device.ip, { cmd, isActive: !(cmd === CMD.CLOSE) });

    device.socket?.write(Buffer.from(code));
  }
  basicCmd(addr, controlCode: CONTROL_CODE, start: Buffer, count: Buffer) {
    // 8位-地址 | 8-功能码 03读,06写| 16位-起始地址 | 16位-操作数量 | 16位-校验码

    let baseCode = Buffer.concat([Buffer.from([addr]), Buffer.from([controlCode]), start, count]);
    const result = Buffer.concat([baseCode, this.crc16(baseCode)])
    console.log('result', result)
    return result;
    // return [...baseCode]
  }
  crc16(buffer: Buffer) {
    const _auchCRCHi = [

      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
      0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
      0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
      0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
      0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
      0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
      0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
      0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
      0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
      0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
      0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    ];
    const _auchCRCLo = [
      0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
      0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
      0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
      0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
      0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
      0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
      0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
      0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
      0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
      0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
      0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
      0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
      0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
      0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
      0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
      0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
      0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
      0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
      0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
      0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
      0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
      0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
      0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
      0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
      0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
      0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    ];

    var crcId = 0, crc_l = 0, crc_h = 0;
    var crcValue = 0xFFFF;
    for (var i = 0; i < buffer.length; i++) {
      crc_l = crcValue & 0x00ff;//低8位
      crc_h = crcValue >> 8;//右移8取高字节
      crcId = crc_h ^ buffer[i];
      crc_h = crc_l ^ _auchCRCHi[crcId];
      crc_l = _auchCRCLo[crcId];
      crcValue = (crc_h << 8 | crc_l);
    }
    return Buffer.from(crcValue.toString(16), 'hex');
  }
}